ВСТУП

Метою даної курсової роботи є розробка інформаційної системи, яка б дозволяла отримувати дані про місцеположення, стежити за місцем перебування службовця певної спеціальної служби під час виконання його службового завдання, а також стежити за фізіологічні показниками під час роботи в екстремальних умовах та попереджати про порушення стану службовця. Система буде спрямована на підвищення рівня безпеки та покращення умов роботи для співробітників оперативно-рятувальних служб, пожежників, військових та інших спеціалізованих підрозділів, які часто працюють у складних та небезпечних умовах.
У наш час існує багато різних підрозділів, які виконують різні завдання підвищеної складності та ризикують своїм життям. Для забезпечення їх безпеки  необхідно мати можливість оперативно контролювати фізіологічні показники, такі як пульс, температура тіла, а також стежити за їх місцеположенням. Традиційні методи контролю зазвичай не дозволяють швидко реагувати на зміни фізичного стану, що може призводити до непередбачуваних та небезпечних ситуацій.
Розроблена система включає як апаратну, так і програмну частини. Апаратна частина включатиме датчики, що будуть зчитувати фізіологічні показники, і передавати їх до серверної частини системи для обробки та збереження. Клієнтська частина включатиме веб-застосунок для адміністраторів та користувачів для перегляду усіх показників а також місцеположення кожного службовця, мобільний застосунок для користувачів та серверну частину для обробки даних та їх безпечного зберігання в базі даних.
Під час виконання курсового проекту розроблено програмну систему, яка дозволить зручно відстежувати фізіологічні показники та точне місцеположення спеціальних служб у реальному часі, враховуючи всі вимоги та потреби користувачів. Адміністратори зможуть переглядати інформацію про фізіологічний стан службовців, керувати користувачами та спеціальними службами, а службовці – переглядати свої фізіологічні показники, отримувати сповіщення про погіршення фізіологічних показників та швидко звертатися до екстрених служб у разі потреби.
Розробка програмної системи планується засобами PHP Laravel, MySQL, React.js, Arduino Uno, C++, Node-RED та Kotlin, що дозволить створити ефективну, надійну та зручну у використанні систему. Також використання перелічених інструментів забезпечить безпеку та довговічність програмної системи за рахунок довгострокової підтримки зазначених технологій.

1	АНАЛІЗ ПРЕДМЕТНОЇ ОБЛАСТІ

1.1	Аналіз предметної області

	У сучасному світі спеціальні служби, такі як оперативно-рятувальні підрозділи, пожежні бригади та військові частини, виконують широкий спектр завдань, які нерідко пов'язані з ризиками для життя і здоров'я їх службовців. Основною метою проекту "SafetyShield" є забезпечення безпеки та збереження життя шляхом моніторингу точного місцеположення та фізіологічних показників службовців екстрених служб.
Для аналізу даної предметної області було проведено додатковий збір інформації з різних джерел. Було проаналізовано дослідження у сфері моніторингу фізіологічних показників, а також проаналізовано наявні системи для виявлення місцеположення та роботу різноманітних носимих пристроїв: смарт-годинників та фітнес-трекерів. Основну увагу було приділено розумінню поточних потреб користувачів та вивченню наявних рішень на ринку.
Проаналізувавши дану предметну область було визначено, що система включає адміністраторів та працівників спеціальних служб.
Адміністратор системи зобов’язаний мати можливість:
-	бачити список усіх спеціальних служб;
-	 бачити список службовців та до якої спеціальної служби вони належать;
-	перевести певного службовця до іншої спеціальної служби;
-	редагувати дані про спеціальну службу або службовця;
-	видалити спеціальну службу або службовця;
-	бачити місцеположення кожного службовця конкретної спеціальної служби на мапі;
-	бачити фізіологічні показники кожного службовця;
-	переглядати дані з датчиків, які зчитують фізіологічні показники, такі як пульс, температура тощо.
Службовець зобов’язаний мати можливість:
-	під’єднати датчик для отримання місцеположення;
-	 під’єднати датчик для зчитування фізіологічних показників пульсу, температури тощо;
-	переглядати своє місцеположення на мапі;
-	переглядати усі показники про свій фізичний стан , що зчитані з датчиків;
-	переглядати повну інформацію про свою спеціальну службу;
-	отримувати сповіщення про погіршення своїх фізіологічних показників.

1.2	Аналіз наявних аналогів

Розберемо найбільш відомі аналоги нашого проекту на сьогодні. Найбільш традиційними системами контролю за станом здоров’я є такі як Apple Health, Fitbit Health Solutions та Honeywell Life Care Solutions.
По-перше, Apple Health працює на пристроях з операційною системою IOS та WatchOS, що означає, що користувачі, які використовують іншу операційну систему не зможуть використовувати дану систему моніторингу свого здоров’я. Основні можливості Apple Health включають: збір даних про фізичну активність, сон, харчування, серцевий ритм та інші фізіологічні показники за допомогою вбудованих сенсорів на пристроях iPhone та Apple Watch, а також зі сторонніх додатків та пристроїв, формування статистики про фізичну активність, включаючи кількість кроків, витрачені калорії, пройдену відстань та інші показники. Також користувачі можуть зберігати медичну інформацію, таку як історія захворювань, алергії, ліки, результати аналізів тощо, що дозволяє легко відстежувати та управляти своїм здоров'ям.
По-друге, послуги Fitbit Health Solutions є досить дорогими в порівнянні з іншими платформами для моніторингу стану здоров’я. Fitbit, спеціалізується на пристроях та програмному забезпеченні для моніторингу фізичної активності та здоров'я, створює інструменти для стимулювання активного способу життя та сприяння збереженню здоров'я користувачів.
По-третє, інтеграція продуктів Honeywell Life Care Solutions з наявними на сьогодні медичними системами та інфраструктурою є досить складною та вимагати значних зусиль та витрат на інженерно-технічні роботи. Деякі продукти Honeywell можуть мати обмежені можливості настройки або адаптації до конкретних потреб або вимог клієнтів, наприклад, адаптації для використання спеціальними службами в екстремальних умовах, що може призвести до недоліків у використанні для певних ситуацій або умов.
Усі вищезазначені аналоги пропонують загальний моніторинг активності та показників здоров’я, та орієнтовані на широке споживацьке використання, що ускладнює їх використання в екстремальних умовах, а також є залежними від платформ, на яких вони використовуються.

1.3	Концептуальне моделювання

Для   відображення   базових   понять   розроблюваної  системи   було  обрано мову моделювання UML.
В процесі опису призначення програмної системи "Safety Shield" було визначено двох основних бізнес-користувачів (акторів) системи: користувач, тобто службовець підрозділу та адміністратор.
В додатку Б на рисунку Б.1  представлена діаграма прецедентів, що основних акторів системи. Згідно з діаграмою, адміністратор розділяється на дві ролі: аналітик даних і адміністратор системи. Аналітик даних має доступ до перегляду показників датчиків, місцеположення службовців та їхнього фізичного стану. Адміністратор системи відповідає за створення організацій, додавання нових службовців до організацій, а також за оновлення та видалення даних про службовців спеціальних служб і організацій. Користувач системи має можливість зареєструватися, увійти в систему, записувати своє місцеположення за допомогою датчика геолокації, а також переглядати ці записи. Крім того, користувач може записувати та переглядати інформацію про свій поточний стан, включаючи частоту серцевих скорочень, температуру і тиск.
На рисунку 1.1 зображено діаграму прецедентів для клієнтської частини програмної системи «SafetyShield». На цій діаграмі зображено основних акторів системи – користувачів, тобто службовців певної спеціальної служби (наприклад, пожежної частини, відділу поліції, військового відділу тощо) та адміністратора системи.

Рисунок 1.1 – Діаграма прецедентів для клієнтської частини програмної системи «SafetyShield»

На діаграмі прецедентів можемо бачити, що користувач системи може зареєструватися, авторизуватися, переглянути особистий профіль, записувати дані про місцеположення, переглядати показники особистого фізичного стану та свого місцеположення. У свою чергу адміністратор системи може авторизуватися, управляти користувачами та управляти даними: керувати спеціальними службами та службовцями, а також переглядати параметри спеціальних служб та службовців: місцеположення кожного службовця, стани службовців та показники фізичного стану із датчиків.
На рисунку 1.2 зображено діаграму прецедентів, на якій відображено моделювання поведінки між користувачем та IoT пристроєм.

Рисунок 1.2 – Діаграма прецедентів користувача розумного пристрою системи «SafetyShield»

На цій діаграмі відображено всі необхідні дії користувача для взаємодії з IoT пристроєм, а також відображено процес передачі зчитаних з пристрою даних (дані про місцеположення користувача та його показники пульсу) на серверну частину.
На рисунку 1.3 зображено діаграму прецедентів для мобільного застосунку програмної системи «SafetyShield».

Рисунок 1.3 – Діаграма прецедентів до мобільного застосунку програмної системи «SafetyShield»

Можемо бачити, що користувач, що вже є службовцем певної спеціальної служби може авторизуватися в системі, далі переглядати особисті дані чи дані про свою спеціальну службу. Також він може створити запис для визначення особистого фізичного стану, під’єднати датчик та здійснити вимір фізичного показника (пульсу, температури або кров’яного тиску). Після цього службовець може переглядати зчитані дані та бачити попередження про порушення свого стану при певній екстремальній ситуації.
У додатку Б на рисунку Б.2 наведено загальну діаграму діяльності, на якій зображено процес додавання адміністратором службовця до спецпідрозділу та визначення поточного місцеположення службовця, а також визначення його фізичних показників (серцевого тиску та температури). По-перше, користувач авторизується, далі адміністратор системи під’єднує цього користувача до спецпідрозділу. Далі користувач має змогу приєднати датчик для визначення його місцеположення та переглядати дані про місцеположення, а також приєднати датчики для визначення частоти серцевих скорочень, тиску та температури. При записі місцеположення службовця враховуються координати його місцеположення та координати розташування спеціального підрозділу, та вираховується відстань між місцеположенням службовця та головним підрозділом (приклад обробки даних наведено в додатку Г)
У додатку Б на рисунку Б.3 зображено загальну діаграму станів до програмної системи «SafetyShield», а саме процес отримання даних про місцеположення конкретного службовця та його фізичних показників: тиску, температури, пульсу. На цій діаграмі можемо бачити, що користувач має спочатку увійти до системи, далі він може перейти на сторінку особистого профілю або перейти на головну сторінку, переглянути зчитані координати за допомогою датчика місцеположення, або перейти на сторінку зчитування даних з датчика пульсу, температури, тиску. Після цього користувач окремо може переглядати виміряні фізичні показники.

2  ПОСТАНОВКА ЗАДАЧІ

Метою даної курсової роботи є проектування та реалізація програмної системи “SafetyShield” для моніторингу фізіологічних показників спеціальних служб у реальному часі з метою забезпечення безпеки та ефективності у виконанні завдань. На основі аналізу предметної області було сформовано наступні вимоги до програмної системи [6].
Система повинна відображати такі дані:
-	поточне місцеположення кожного працівника спеціальних служб;
-	 фізіологічні показники кожного працівника, включаючи пульс температуру та кров’яний тиск;
-	 дані про працівників: ім’я, прізвище, посада, належність до спеціальної служби;
-	статистичні дані щодо фізіологічних показників для подальшого аналізу та запобігання ризикам для життя та здоров’я.
Система повинна підтримувати наступні функції:
-	перегляд поточного місцеположення службовців на мапі у реальному часі;
-	 додавання нових службовців до системи, редагування їх даних та видалення з системи;
-	відображення даних фізіологічних показників із датчиків для аналізу;
-	 отримання даних фізіологічних показників із датчиків для окремого службовця.
Система для моніторингу місцеположення та фізіологічних показників спеціальних служб допоможе забезпечити ефективний контроль за місцеположенням та станом здоров'я службовців у реальному часі. Це дозволить оперативно реагувати на будь-які відхилення від норми, знижуючи ризики для життя і здоров'я, а також підвищуючи загальну ефективність виконання службових обов'язків.
Архітектура системи “SafetyShield” повинна забезпечувати безпечне зберігання та передавання даних про місцеположення та фізіологічні показники працівників спеціальних служб. Для досягнення цієї мети має бути використано багатошарову архітектуру типу "клієнт-сервер", яка включає три основні шари: презентаційний, бізнес-логіки та шар даних.

3 ПРОЕКТУВАННЯ ПРОГРАМНОГО ПРОДУКТУ

3.1 Архітектура системи

Архітектура системи для моніторингу місцеположення та фізіологічних показників спеціальних служб базується на багатошаровій клієнт-серверній моделі, яка забезпечує надійність, масштабованість і безпеку для зберігання та передачі даних про місцеположення та фізіологічні показники працівників спеціальних служб [2]. Архітектура програмної системи складається з презентаційного шару, шару бізнес-логіки та шару доступу до даних.
Презентаційний шар відповідає за взаємодію з користувачами системи та включає в себе:
-	веб-додаток - інтерфейс для адміністраторів та службовців спецслужб для перегляду даних про місцеположення та фізіологічні показники  реальному часі;
-	мобільний додаток - інтерфейс для працівників спеціальних служб для перегляду власних даних та отримання сповіщень про зависокі або низькі фізіологічні показники.
Шар бізнес-логіки обробляє дані, що надходять з IoT-пристроїв, та передає їх між іншими шарами системи. Він включає в себе:
-	  серверну частину - обробка запитів з клієнтських додатків, застосування бізнес-логіки, автентифікація користувачів та обробка даних;
-	  інтеграційний модуль - зв’язок між IoT-пристроями та серверною частиною, забезпечення отримання та передавання даних у реальному часі.
Шар даних відповідає за зберігання та управління даними. Він включає:
-	  систему управління базами даних (MySQL): Зберігання даних про користувачів, службовців, їхні фізіологічні показники, місцеположення.

3.2 Вибір технологій

При виборі технологій для реалізації системи для моніторингу місцеположення та фізіологічних показників спеціальних служб було враховано вимоги до безпеки, продуктивності, масштабованості та зручності розробки.
Презентаційний шар включає в себе такі технології:
-	  React.js - для створення клієнтської частини програмної системи для зручного адміністрування системи та роботи користувачів;
-	  Kotlin - для розробки мобільного додатку для працівників спеціальних служб, що дозволяє працювати з даними у реальному часі, відображати дані з серверної частини системи.
Шар бізнес-логіки включає в себе наступні технології:
-	  PHP Laravel - для розробки серверної частини, що забезпечує обробку запитів на отримання, запис, видалення, оновлення даних, автентифікацію та бізнес-логіку. Laravel також має вбудовані засоби для управління авторизацією та аутентифікації користувачів [4];
-	  Node-RED - для інтеграції з IoT-пристроями, що забезпечує обробку та передачу даних про місцеположення та фізіологічні показники на серверну частину;
-	 мікроконтролер Arduino Uno для роботи датчиків місцеположення (NEO-6M) та зчитування частоти серцевих скорочень (MAX30102) та C++ для обробки та фільтрації даних що були зчитані з датчиків.
Шар даних включає в себе такі технології як:
-	  MySQL – реляційна база даних, яка забезпечує надійне зберігання та доступ до даних.

3.3 Опис компонентів системи

Система для моніторингу місцеположення та фізіологічних показників спеціальних служб складається з декількох основних компонентів, кожен з яких виконує свою унікальну функцію для повноцінного функціонування системи. Архітектура системи включає серверну частину, клієнтську частину, IoT-пристрої та мобільний додаток.
Серверна частина відповідає за обробку запитів від клієнтів, управління базою даних, а також забезпечення безпеки та цілісності даних.
Клієнтська частина взаємодіє з сервером через API, отримуючи та відправляючи дані, а також забезпечує відображення поточних фізіологічних показників та місцеположення службовців у реальному часі. Інтерфейс побудований таким чином, щоб забезпечити легкий доступ до необхідної інформації як адміністраторам, так і службовцям спеціальних служб.
IoT-пристрої розроблені на платформі Arduino Uno. За допомогою цих пристроїв відбувається зчитування місцеположення та фізіологічні показники користувача. Дані, зібрані з датчиків, обробляються мікроконтролером Arduino і відправляються на сервер для подальшого аналізу та збереження. Взаємодія з сервером здійснюється через Node-RED, який забезпечує передачу даних у режимі реального часу.
Мобільний додаток дозволяє службовцям реєструватися та входити в систему, переглядати свої фізіологічні показники, а також отримувати повідомлення про критичні зміни у своїх показниках.

4 СТРУКТУРА БАЗИ ДАНИХ

4.1 Опис моделі даних

Для розробки програмного продукту було обрано реляційну базу даних MySQL. Під час реалізації бази даних було створено наступні таблиці:
-	Users (Таблиця з даними про користувачів та ролі користувачів);
-	Organizations (Таблиця із підрозділами спеціальних служб);
-	Employees (Таблиця з даними про службовців певної спецслужби);
-	PhysicalStates (Таблиця з обробленими даними фізичних показників конкретного для службовця);
-	SensorData (Таблиця, що зберігає дані про датчик а також дані, що збирає цей датчик);
-	CurrentConditions (Таблиця, що зберігає дані про поточний стан службовця конкретного підрозділу спецслужби);
-	CurrentLocations (Таблиця, що зберігає дані про географічні координати – широту та довготу для місцеположення службовця);
-	EmployeeLocation (Таблиця, що пов’язує місцеположення із конкретним службовцем).
Модель даних розроблена таким чином, щоб забезпечити цілісність та узгодженість даних, а також легкість у розширенні та модифікації структури бази даних у майбутньому.

4.2 ER-діаграма

На рисунку 4.1 зображено ER-модель даних до програмної системи «SafetyShield».

Рисунок 4.1 – ER-діаграма до програмної системи «SafetyShield»

На ER-діаграмі зображено наступні сутності: користувачі, службовці, організації, фізіологічні показники та місцеположення. Зв'язки між сутностями відображають їх взаємозалежність. Наприклад, сутність службовця пов'язана з сутністю організації за допомогою зв'язку "багато-до-одного", оскільки кожен службовець належить до однієї організації, але одна організація може мати багато службовців. Сутність фізіологічних показників та місцеположення пов'язана з сутністю службовця за допомогою зв'язку "багато-до-одного", оскільки один службовець може мати багато записів про фізіологічні показники та місцеположення.

4.3 Опис сутностей та зв’язків

Таблиця користувачів містить поля для зберігання ідентифікатора користувача, імені, прізвища, електронної пошти, пароля та ролі користувача (адміністратор або службовець). Кожен користувач має унікальний ідентифікатор, який використовується для зв'язку з іншими таблицями.
Таблиця службовців містить поля для зберігання ідентифікатора службовця, посади, статі та посилання на організацію, до якої належить службовець.
Таблиця організацій містить поля для зберігання ідентифікатора організації, назви організації та адреси.
Таблиця фізіологічних показників містить поля для зберігання ідентифікатора запису, частоти серцевих скорочень, температури тіла, артеріального тиску, дати та часу запису, а також посилання на службовця. Ця таблиця зберігає всі записи фізіологічних показників для кожного службовця.
Таблиця місцеположення містить поля для зберігання ідентифікатора запису, координат GPS (широта та довгота), дати та часу запису, а також посилання на службовця. Ця таблиця зберігає всі записи про місцеположення для кожного службовця.
Відношення між таблицями:
-	користувач може мати лише одну роль (адміністратор, користувач тощо);
-	в одному спецпідрозділі може працювати багато службовців;
-	кожен службовець спецслужби має жодного або багато записів про свій фізичний стан;
-	кожен оброблений показник фізичного стану службовця має один або багато показників із датчика;
-	на одній і тій самій локації може знаходитися декілька службовців із різних підрозділів;
-	один службовець може мати декілька умов праці на певній локації.

5 КОДУВАННЯ ПРОГРАМНОГО ПРОДУКТУ

5.1 Опис основних модулів

Система "Safety Shield" складається з кількох основних модулів, кожен з яких виконує конкретні функції та забезпечує певні аспекти роботи системи. Основні модулі включають: Back-End, Front-End, IoT, Mobile.
Для створення серверної частини проекту було використано мову програмування PHP та фреймворк Laravel. Для зв’язку з базою даних, зв’язків між таблицями та створення моделей було використано Eloquent ORM. Eloquent ORM забезпечує зручний спосіб взаємодії з базою даних за допомогою об'єктно-орієнтованої моделі. Вона дозволяє працювати з таблицями бази даних через класи моделей, представляючи кожен рядок таблиці як об'єкт моделі. Візуальне зображення структури серверу зображено у додатку В на рисунку В.1. Для розробки архітектури серверної частини було використано стандартну архітектуру проекту Laravel, що містить директорії Http/Controllers де зберігаються контролери де і прописана основна логіка серверної частини відповідно до кожного вхідного запиту [1]. У директорії Models містяться моделі, де прописані зв’язки з таблицями бази даних. У файлі routes/api.php прописані усі шляхи серверної частини. У директорії database/migrations описані усі міграції що були створені [4].
Для шифрування паролів та створення токенів авторизації було використано JWT (JSON Web Tokens). JWT є компактним, самодостатнім і безпечним способом передачі інформації між сторонами за допомогою JSON-об'єктів. Це дозволяє створювати та перевіряти токени авторизації, а також забезпечує можливість шифрування паролів користувачів.
Серверну частину було розподілено на три шари:
-	 User Interface – конфігурація та запити, за якими користувач взаємодіє з API – контролери та шляхи відповідно до REST специфікації.
-	Бізнес-логіка – моделі даних та їхня обробка, а також методи в яких застосована обробка даних.
-	  Доступ до даних – створення таблиць бази даних, міграції та взаємодія бази даних із сервером.
IoT частина програмної системи була розроблена в середовищі розробки Arduino IDE на мові програмування C++. Для взаємодії пристрою з іншими компонентами системи та відправки даних на серверну частину було використано середовище Node Red.
IoT пристрій складається з мікроконтролера Arduino UNO, датчика NEO-6M для отримання координат GPS, а також із датчика MAX30102 для зчитування частоти серцевих скорочень.
На рисунку 5.1 зображено будову пристрою в поєднанні з датчиком NEO-6M для зчитування місцеположення.

Рисунок 5.2 – Будова пристрою в поєднанні із датчиком зчитування місцеположення

На рисунку 5.2 зображено будову пристрою в поєднанні з датчиком MAX30102 для зчитування частоти серцевих скорочень.

Рисунок 5.2 – Будова пристрою в поєднанні із датчиком зчитування частоти серцевих скорочень

Для отримання поточного місцеположення та частоти пульсу дані з обох датчиків збираються кожні 5 секунд. Далі вони приводяться до JSON-формату та  передаються за протоколом https на серверну частину програмної системи. Після кожного запиту до серверної частини пристрій отримує статус про запис даних, що відображається за допомогою консолі. Спочатку підключається необхідний датчик до мікроконтролера, і він починає передавати дані в Serial Monitor. Після цього запускаємо локальний сервер Node Red, що зчитує дані з COM-порту, що вже приведені до правильної форми, та передає ці дані на серверну частину, де відбувається їх перевірка, обробка та запис в базу даних.
Для архітектури клієнтської частини програмної системи було використано стандартну архітектуру проекту бібліотек React.js, де є такі директорії як public та src, файли App.js та package.json. Також була створена директорія components для зберігання усіх компонентів [5]. У додатку В на рисунку В.2 зображено структуру клієнтської частини програмної системи «SafetyShield». Можемо бачити, що головною директорією є src, в ній є директорії assets, де зберігаються json-файли для української та англійської локалізації. В директорії components/navbar зберігаються компоненти навігації, такі як Login, Register, Home, Admin. У директорії user/interfaces знаходяться компоненти інтерфейсу користувача: відображення широти і довготи на мапі, відображення профілю користувача, показників фізичного стану. Також в директорії admin зберігаються компоненти, що відповідають за роботу з панеллю адміністратора, а саме перегляд усіх даних, видалення, оновлення та редагування даних. В директорії translation зберігається файл i18n.js, що відповідає за підключення бібліотеки i18n для забезпечення локалізації української та англійської мов а також зберігання поточного перекладу в cookies браузера.
Для зберігання токена авторизації користувача на клієнтській частині програмної системи було використано Redux та sessionStorage, що зберігає дані токену в середовищі сесії та за потреби використовує його [5]. Для зв’язку із серверною частиною програмної системи було використано технологію axios та async/await. Ці механізми дозволяють асинхронно відправляти на серверну частину запити. Для відображення широти та довготи було використано Leaflet maps. Також було додано локалізацію за допомогою i18n для англійської та української мови усього інтерфейсу клієнтської частини, а також правильне форматування дати та часу для відображення часової позначки про місцеположення та показники фізичного стану.
Мобільний застосунок використовує Kotlin Retrofit для взаємодії з серверною частиною програмної системи. Для відображення даних з серверної частини було використано RecycleView. Для збереження токену авторизації було використано Encrypted Shared Preferences. Мобільний застосунок відповідає за відображення даних про фізіологічні показники для конкретного службовця що були зчитані з датчиків.
Для архітектури мобільного застосунку програмної системи було використано архітектуру Android-застосунку із Manifest файлом, файлами розмітки Android xml, drawable, а також activities. Проект мобільного застосунку організований за такими директоріями, як Activities - містить всі активності застосунку, adapters містить адаптери для RecyclerView та інших компонентів, models містить класові моделі, що представляють дані, viewmodels містить класи ViewModel для управління логікою інтерфейсу користувача, layout містить XML-файли для макетів інтерфейсу користувача, values містить XML-файли для ресурсів (рядків, кольорів, розмірів тощо), drawable містить графічні ресурси, menu містить XML-файли для меню. AndroidManifest.xml: маніфестний файл, що визначає основні налаштування застосунку, дозволи та основні компоненти (активності, сервіси тощо). Структура проекту наведена в додатку В на рисунку В.3.

5.2 Опис бізнес-логіки системи

На серверній частині програмної системи відбувається аналіз даних, які були отримані з датчику місцеположення та датчиків для визначення фізіологічних показників (пульсу, температури, тиску), а також відбувається визначення відстані між двома географічними точками за широтою та довготою. За допомогою формули Гаверсинуса визначається найкоротша відстань між точками на поверхні Землі. Код обробки широти та довготи для визначення відстані наведений в додатку Г.
Бізнес-логіка в IoT застосунку реалізована із використанням методів Калмана для фільтрації даних отриманих з датчика місцеположення та з використанням алгоритму експоненціального згладжування для згладжування отриманих значень частоти пульсу, що дозволяє зменшити вплив різких коливань та неточностей при вимірі пульсу. Код IoT частини наведений в додатку Г.
Бізнес-логіка в мобільному застосунку представлена обчисленням середніх значень частоти пульсу, стандартного відхилення частоти пульсу, розрахунком індексу здоров'я - на основі отриманих статистичних показників. Цей індекс є спрощеним показником, який враховує середнє значення частоти пульсу, стандартне відхилення, мінімальне та максимальне значення частоти пульсу. Код обробки даних в мобільному застосунку наведений в додатку Г.

6 ОПИС РОЗРОБЛЕНОЇ ПРОГРАМНОЇ СИСТЕМИ

6.1	Інструкція користувача

Інструкція користувача для системи "Safety Shield" включає кроки для початку роботи з системою, опис основних функцій та способів їх використання. Користувачі системи поділяються на дві основні категорії: службовці спеціальних служб та адміністратори системи.
Реєстрація та вхід в систему:
-	для того, щоб користуватися системою, нові користувачі повинні пройти процедуру реєстрації, заповнивши необхідні поля, такі як ім’я, прізвище, email, пароль;
-	після реєстрації користувач може увійти в систему за допомогою свого email та пароля.
Основні функції програмної системи для службовців:
-	користувач може зафіксувати своє поточне місцеположення за допомогою GPS-модуля. Для цього він має бути авторизований та приєднати модуль GPS;
-	авторизований користувач, що вже є службовцем деякої спецслужби може переглядати свої попередні записи місцеположення за допомогою інтерактивної мапи;
-	авторизований користувач, що вже є службовцем деякої спецслужби може записати поточні фізіологічні показники (серцевий ритм, температуру та тиск) за допомогою підключених датчиків;
-	авторизований користувач, що вже є службовцем деякої спецслужби може переглядати свої попередні записи фізіологічних показників;
-	авторизований користувач може переглядати свої дані, дані про спецслужбу до якої він належить та видалити свій обліковий запис.

Основні функції програмної системи для адміністраторів:
-	адміністратор може створювати нові спеціальні служби, додавати, видаляти службовців;
-	адміністратор може переглядати показники датчиків, місцеположення службовців та їх фізичний стан, а також порушення фізіологічних показників;
-	адміністратор може редагувати дані про спеціальні служби та службовців.

6.2	Інтерфейс користувача

Одразу після запуску клієнтської частини користувач може зареєструватися або авторизуватися в системі (див. рис. 6.1).

Рисунок 6.1 – Інтерфейс головної сторінки клієнтської частини програмної системи «SafetyShield»
Сторінка адміністратора системи містить інструменти для керування спеціальними службами та їх службовцями, а також перегляд даних із датчиків кожного службовця: місцеположення на мапі та фізіологічні показники (див. рис. 6.2, 6.3).

Рисунок 6.2 – Сторінка адміністрування системи «SafetyShield»

Рисунок 6.3 – Оновлення інформації про службовця адміністратором

Службовці спеціальних служб можуть переглядати інформацію про свій профіль, а також своє місцеположення на мапі та фізіологічні показники  (див. рис. 6.4, 6.5).

Рисунок 6.4 – Відображення місцеположення службовця на мапі

Рисунок 6.5 – Відображення повної інформації про службовця

Мобільний застосунок дозволяє переглядати повну інформацію про фізіологічні показники службовця з датчиків а також про їх порушення. На рисунку 6.6 зображено інтерфейс головної сторінки мобільного застосунку.

Рисунок 6.6 – Інтерфейс головної сторінки мобільного застосунку «SafetyShield»

Рисунок 6.7 – Сторінка відображення фізіологічних показників службовця

На рисунку 6.7 зображено інформацію, зчитану з датчику серцевого ритму, індекс здоров’я,  а також відхилення показників від норми.

ВИСНОВКИ

У ході виконання курсової роботи була розроблена система "Safety Shield", призначена для моніторингу місцеположення та фізіологічних показників служб спеціальних підрозділів. Основною метою проекту було забезпечення безпеки та ефективності роботи службовців, таких як пожежники, рятувальники та поліція, військові підрозділи шляхом оперативного відстеження їх фізіологічного стану та місцеположення.
Основними акторами системи було визначено адміністраторів та службовців спеціальних підрозділів. Адміністратор може повністю контролювати підрозділи спецслужб та їх співробітників та вчасно реагувати на будь-які надзвичайні ситуації під час виконання службових завдань.
Розроблена система дозволяє збирати та аналізувати дані в режимі реального часу, що забезпечує своєчасне виявлення та реагування на потенційні загрози для здоров'я або безпеки службовців. Мобільний додаток забезпечує зручний інтерфейс для користувачів, тоді як веб-інтерфейс надає адміністраторам можливість керування системою та аналізу зібраних даних.
Використання сучасних технологій, таких як Laravel, React.js, Kotlin для розробки серверної, клієнтської частини та мобільного застосунку, Arduino Uno та Node-RED для інтеграції з IoT пристроями, дозволило створити гнучку, масштабовану та надійну систему.
Посилання на репозиторій GitHub:
https://github.com/NureSosnytskyiAndrii/apzkr-pzpi-21-8-sosnytskyi-andrii
Посилання на функціональне тестування програмної системи:
https://www.youtube.com/watch?v=lF_lytK-s4I
